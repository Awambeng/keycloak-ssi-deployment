name: cd

on:
  #push:
  # branches:
  #  - cd
  repository_dispatch:
    types: [start-build]
      
env:
  #REGISTRY: ghcr.io
  #IMAGE_NAME: adorsys/kcoidvci-dispatch

  REGISTRY: 917848404243.dkr.ecr.us-east-1.amazonaws.com
  IMAGE_NAME: kcoid4vci
  ECS_SERVICE: kcoid4vci                     # name of the service
  ECS_CLUSTER: kcoid4vci                     # name of the cluster
  ECS_TASK_DEFINITION: .aws/task-definition.json # path of the JSON task definition
  CONTAINER_NAME: "app"                          # name of the container name in the task definition
  
jobs:
  build-deliver:
    runs-on: ubuntu-latest

    permissions:
      packages: write
      contents: read
  
    steps:
      - name: Checkout
        uses: actions/checkout@v4
          
      #- name: Log in to GitHub Container Registry
      #  uses: docker/login-action@v3
      #  with:
      #    registry: ${{ env.REGISTRY }}
      #    username: ${{ github.repository_owner }}
      #    password: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure AWS credentials 
        # Programmatic authentication to aws
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}


      #- name: Build container
      #  uses: docker/build-push-action@v5
      #  with:
      #    context: .
      #    push: true
      #    tags: ${{ steps.meta.outputs.tags }}
      #    build-args: |
      #      USERNAME=${{ github.actor }}
      #      PAT=${{ secrets.PAT }
      - name: upload image to ECR
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          repo: ${{ env.IMAGE_NAME }}
          registry: ${{ env.REGISTRY }}
          build-args: |
            USERNAME=${{ github.actor }}
            PAT=${{ secrets.PAT }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

